[
  {
    "id": "0",
    "title": "Express.js ",
    "outDecription": "Node.js uchun eng mashhur va keng qo'llaniladigan web framework.",
    "description": "Express.js — bu Node.js uchun eng mashhur va keng qo'llaniladigan web framework bo'lib, u web va mobil (API qismini) ilovalarni yaratishni soddalashtiradi.",
    "advantages": [
      "Yengillik: Soddalashtirilgan va intuitiv interfeys.",
      "Moslashuvchanlik: HTML sahifalar, API-lar va boshqa ko'pgina funktsiyalarni yaratish imkoniyati.",
      "Keng qo'llab-quvvatlash: Katta hamjamiyat va ko'plab plaginlar."
    ],
    "usage": "- Node.js uchun keng qo'llaniladigan web framework bo'lib, u web va mobil ilovalarni yaratishni soddalashtiradi.",
    "example": "const express = require('express');\nconst app = express();\nconst port = 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello, World!');\n});\n\napp.listen(port, () => {\n  console.log(`Server is running at http://localhost:${port}`);\n});"
  },
  {
    "id": "1",
    "title": "React.js",
    "outDecription": "Foydalanuvchi interfeyslarini yaratish uchun komponent asosidagi kutubxona.",
    "description": "React.js — bu Facebook tomonidan yaratilgan va qo'llab-quvvatlanadigan, foydalanuvchi interfeyslarini yaratishga mo'ljallangan JavaScript kutubxonasi.",
    "advantages": [
      "Komponent asosidagi tuzilma: UI-ni kichik, qayta ishlatiladigan qismlarga bo'lish imkoniyati.",
      "Virtual DOM: Yaxshi ishlash va minimal qayta render qilish.",
      "Katta hamjamiyat va keng qo'llab-quvvatlash: Ko'plab plaginlar va resurslar mavjud."
    ],
    "usage": "- Interaktiv va dinamik foydalanuvchi interfeyslarini yaratish uchun ishlatiladi.",
    "example": "import React from 'react';\nimport ReactDOM from 'react-dom';\n\nfunction App() {\n  return <h1>Hello, World!</h1>;\n}\n\nReactDOM.render(<App />, document.getElementById('root'));"
  },
  {
    "id": "2",
    "title": "Vue.js",
    "outDecription": "Minimalist va yuqori moslashuvchan JavaScript framework.",
    "description": "Vue.js — bu foydalanuvchi interfeyslarini yaratishga mo'ljallangan, engil va moslashuvchan JavaScript framework.",
    "advantages": [
      "O'rganish oson: Soddalashtirilgan sintaksis va hujjatlar.",
      "Reaktivlik: Ma'lumotlarni avtomatik yangilash.",
      "Kichik o'lcham: Tez yuklanadi va ishlaydi."
    ],
    "usage": "- Yengil va reaktiv foydalanuvchi interfeyslarini yaratish uchun ishlatiladi.",
    "example": "<template>\n  <div id=\"app\">\n    <h1>{{ message }}</h1>\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      message: 'Hello, World!'\n    };\n  }\n};\n</script>"
  },
  {
    "id": "3",
    "title": "Next.js",
    "outDecription": "Server-side rendering va static saytlarni yaratishga mo'ljallangan framework.",
    "description": "Next.js — bu React asosidagi framework bo'lib, SEO optimallashgan va tezkor saytlar yaratish imkoniyatini beradi.",
    "advantages": [
      "Server-side rendering: Tezroq yuklanish va yaxshiroq SEO.",
      "Static saytlarni yaratish: Tez va xavfsiz.",
      "Oson o'rnatish va konfiguratsiya: React bilan integratsiyalashgan."
    ],
    "usage": "- SEO talab qiluvchi yoki serverdan olingan ma'lumotlar bilan ishlovchi ilovalar uchun ishlatiladi.",
    "example": "import Link from 'next/link';\n\nexport default function Home() {\n  return (\n    <div>\n      <h1>Hello, Next.js</h1>\n      <Link href=\"/about\">About</Link>\n    </div>\n  );\n}"
  },
  {
    "id": "4",
    "title": "Node.js",
    "outDecription": "Server tomonida ishlatiladigan JavaScript runtime.",
    "description": "Node.js — bu V8 JavaScript dvigateliga asoslangan runtime bo'lib, server tomonida ishlatiladi.",
    "advantages": [
      "Tezlik: Event-driven, non-blocking I/O arxitekturasi tufayli.",
      "Yagona til: Bir til bilan frontend va backendni boshqarish.",
      "Katta ekotizim: Ko'plab NPM paketlari."
    ],
    "usage": "- Backend serverlarini yaratish va real-time ilovalar uchun ishlatiladi.",
    "example": "const http = require('http');\n\nconst server = http.createServer((req, res) => {\n  res.statusCode = 200;\n  res.setHeader('Content-Type', 'text/plain');\n  res.end('Hello, World!\\n');\n});\n\nserver.listen(3000, () => {\n  console.log('Server running at http://localhost:3000/');\n});"
  },
  {
    "id": "5",
    "title": "Angular",
    "outDecription": "Foydalanuvchi interfeyslarini yaratish uchun to'liq JavaScript framework.",
    "description": "Angular — bu Google tomonidan ishlab chiqilgan va qo'llab-quvvatlanadigan, o'z-o'zini yetarli, kuchli JavaScript framework.",
    "advantages": [
      "Modul tizimi: Katta ilovalar uchun ishlashni soddalashtiradi.",
      "Double Data Binding: Model va View orasidagi avtomatik sinxronizatsiya.",
      "Dependency Injection: Komponentlar o'rtasida xizmatlarni ko'rsatuvchi tizim."
    ],
    "usage": "- Katta va kompleks veb-ilovalar uchun ishlatiladi.",
    "example": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  template: '<h1>{{ title }}</h1>',\n})\nexport class AppComponent {\n  title = 'Hello, Angular!';\n}"
  },
  {
    "id": "6",
    "title": "Svelte",
    "outDecription": "Tez va yengil JavaScript framework, avtomatik reaktivlik va minimal kod.",
    "description": "Svelte — bu boshqa frameworklardan farqli o'laroq, asosan frontend ilovalarni optimallashtiradi va ularda minimal kod bilan ishlash imkonini beradi.",
    "advantages": [
      "Tez ishlash: Virtual DOM o'rniga real DOM bilan ishlaydi.",
      "Kichik hajm: Tez yuklanish va resurslarni tejash.",
      "Soddalashtirilgan sintaksis: Endi reaktivlikni qo'lda sozlashga hojat yo'q."
    ],
    "usage": "- Minimal va tezkor ilovalar yaratish uchun ishlatiladi.",
    "example": "<script>\n  let name = 'World';\n</script>\n\n<h1>Hello, {name}!</h1>"
  },
  {
    "id": "7",
    "title": "Deno",
    "outDecription": "Node.js ga raqobat sifatida ishlab chiqilgan, xavfsizlikka asoslangan JavaScript/TypeScript runtime.",
    "description": "Deno — bu Ryan Dahl tomonidan yaratilgan va Node.js ning bir qator kamchiliklarini bartaraf etishga qaratilgan yangi JavaScript runtime.",
    "advantages": [
      "Xavfsizlik: Deno yordamida tarmoqga, fayllarga va muhitga faqat ruxsat berilgan kodlar kirish mumkin.",
      "TypeScript qo'llab-quvvatlash: TypeScript-ni to'g'ridan-to'g'ri ishlatish imkoniyati.",
      "Modul tizimi: Har bir modul alohida fayl sifatida ishlatiladi."
    ],
    "usage": "- JavaScript va TypeScript bilan ishlovchi yangi server tizimlari yaratishda ishlatiladi.",
    "example": "import { serve } from 'https://deno.land/std/http/server.ts';\n\nconst handler = (req) => {\n  return new Response('Hello, Deno!');\n};\n\nserve(handler, { port: 8000 });"
  },
  {
    "id": "8",
    "title": "NestJS",
    "outDecription": "Backend uchun kengaytiriladigan va modulli TypeScript framework.",
    "description": "NestJS — bu backend ilovalarini yaratish uchun ishlab chiqilgan, TypeScript asoslangan va Angular’dan ilhomlangan framework.",
    "advantages": [
      "Modulli arxitektura: Katta backend ilovalarini yaratish uchun qulay.",
      "Scalable: Yaxshi organizatsiya va integratsiya imkoniyatlari.",
      "TypeScript asosidagi kod yozish imkoniyati: Yaxshi xatoliklarni aniqlash va avtomatik yordam."
    ],
    "usage": "- Katta va murakkab server tarafidagi ilovalar yaratish uchun ishlatiladi.",
    "example": "import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\n\n@Module({\n  imports: [],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}"
  },
  {
    "id": "9",
    "title": "Webpack",
    "outDecription": "JavaScript va boshqa resurslarni modullar va fayllarga yig'ish uchun ishlatiladigan bundler.",
    "description": "Webpack — bu JavaScript, CSS, HTML va boshqa fayllarni modullarga yig'ish va optimallashtirish uchun ishlatiladigan powerful bundler.",
    "advantages": [
      "Modul tizimi: Turli xil fayllarni birlashtirish va optimallashtirish.",
      "Plaginlar: Ko'plab plaginlar yordamida maxsus xususiyatlar qo'shish.",
      "Tezlik: Katta ilovalar uchun juda moslashuvchan va tez."
    ],
    "usage": "- JavaScript ilovalarini modullarga bo'lib va optimallashtirib ishga tushirish uchun ishlatiladi.",
    "example": "module.exports = {\n  entry: './src/index.js',\n  output: {\n    filename: 'bundle.js',\n    path: path.resolve(__dirname, 'dist'),\n  },\n  module: {\n    rules: [{\n      test: /.css$/,\n      use: ['style-loader', 'css-loader'],\n    }],\n  },\n};"
  },
  {
    "id": "10",
    "title": "React",
    "outDecription": "UI komponentlarini yaratish uchun JavaScript kutubxonasi.",
    "description": "React — bu foydalanuvchi interfeyslari yaratish uchun ishlatiladigan JavaScript kutubxonasi bo'lib, komponentga asoslangan arxitekturaga ega.",
    "advantages": [
      "Reaktiv: Ma'lumot o'zgarganida DOM avtomatik yangilanadi.",
      "Komponentlar: Ilovani kichik va qayta foydalaniladigan qismlarga ajratish.",
      "Virtual DOM: Yangi o'zgartirishlar tez va samarali tarzda amalga oshiriladi."
    ],
    "usage": "- Yangi va interaktiv foydalanuvchi interfeyslari yaratishda ishlatiladi.",
    "example": "import React, { useState } from 'react';\n\nfunction Counter() {\n  const [count, setCount] = useState(0);\n  return (\n    <div>\n      <p>You clicked {count} times</p>\n      <button onClick={() => setCount(count + 1)}>Click me</button>\n    </div>\n  );\n}\nexport default Counter;"
  },
  {
    "id": "11",
    "title": "Vue.js",
    "outDecription": "Progressiv JavaScript framework, foydalanuvchi interfeyslarini yaratish uchun.",
    "description": "Vue.js — bu o'z-o'zidan ishlaydigan va to'liq o'zgartirish mumkin bo'lgan JavaScript framework bo'lib, foydalanuvchi interfeyslari va single-page ilovalar yaratishda ishlatiladi.",
    "advantages": [
      "Oson integratsiya: Kichik va katta ilovalar uchun mos.",
      "Reaktiv tizim: Ma'lumot o'zgarganda avtomatik DOM yangilanishi.",
      "Kengaytirilgan: Routing, state management, va boshqa ko'plab funksiyalarni qo'llab-quvvatlaydi."
    ],
    "usage": "- Frontend ilovalar va SPA yaratish uchun ishlatiladi.",
    "example": "<template>\n  <button @click=\"increment\">You clicked {{ count }} times</button>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      count: 0\n    };\n  },\n  methods: {\n    increment() {\n      this.count++;\n    }\n  }\n};\n</script>"
  },
  {
    "id": "12",
    "title": "Tailwind CSS",
    "outDecription": "Foydalanuvchi interfeyslarini yaratishda ishlatiladigan utility-first CSS framework.",
    "description": "Tailwind CSS — bu foydalanuvchi interfeyslarini yaratishda ishlatiladigan utility-first CSS framework bo'lib, uni ishlatish orqali tayyor komponentlarni yaratish imkoniyatini beradi.",
    "advantages": [
      "Utility-first: Kichik, qayta ishlatiladigan sinflar bilan ishlash imkoniyati.",
      "Moslashuvchan: Ilovangizga tez va oson dizayn qo'shish imkonini beradi.",
      "Tezkor ishlab chiqish: Kodni tezda yaratish va o'zgartirish imkoniyati."
    ],
    "usage": "- Frontend dizaynini tez va moslashuvchan tarzda yaratish uchun ishlatiladi.",
    "example": "<div class=\"bg-blue-500 text-white p-4 rounded\">\n  <p>Hello, Tailwind!</p>\n</div>"
  },
  {
    "id": "13",
    "title": "Socket.io",
    "outDecription": "Real-time, ikki tomonlama web socket aloqasi yaratish uchun kutubxona.",
    "description": "Socket.io — bu server va mijoz orasida real-time aloqalarni yaratish uchun ishlatiladigan kutubxona. Websocket orqali ikki tomonlama aloqalar o'rnatish imkoniyatini beradi.",
    "advantages": [
      "Real-time aloqalar: Mijoz va server orasida real vaqt rejimida ma'lumot almashish.",
      "Event-based tizim: Xabarlar va hodisalarni osongina boshqarish.",
      "WebSocket qo'llab-quvvatlash: Server va mijoz o'rtasida doimiy aloqalar yaratish."
    ],
    "usage": "- Real-time chat tizimlari, o'yinlar yoki boshqa real-time ilovalar yaratishda ishlatiladi.",
    "example": "const io = require('socket.io')(3000);\n\nio.on('connection', (socket) => {\n  console.log('A user connected');\n  socket.on('message', (msg) => {\n    console.log('Message: ' + msg);\n  });\n});"
  },
  {
    "id": "14",
    "title": "Redux",
    "outDecription": "React ilovalarida holatni boshqarish uchun JavaScript kutubxonasi.",
    "description": "Redux — bu holatni boshqarish uchun JavaScript kutubxonasi bo'lib, katta va murakkab React ilovalarida holatni boshqarishni soddalashtiradi.",
    "advantages": [
      "Centralized state: Ilovadagi barcha holatlar bir joyda saqlanadi.",
      "Predictable: Holat o'zgarishi aniq va bashorat qilinishi mumkin.",
      "Integratsiya: React bilan juda yaxshi integratsiya qiladi."
    ],
    "usage": "- React ilovalarida holatni boshqarish uchun ishlatiladi.",
    "example": "import { createStore } from 'redux';\n\nconst initialState = { count: 0 };\n\nfunction reducer(state = initialState, action) {\n  switch (action.type) {\n    case 'INCREMENT':\n      return { ...state, count: state.count + 1 };\n    default:\n      return state;\n  }\n}\n\nconst store = createStore(reducer);"
  },
  {
    "id": "15",
    "title": "Moment.js",
    "outDecription": "JavaScript uchun sana va vaqtni boshqarish kutubxonasi.",
    "description": "Moment.js — bu JavaScript dasturlash tilida sanalar va vaqtni oson boshqarish uchun mo'ljallangan kutubxona. U sanalar va vaqtlarni o'qish, formatlash va hisoblashni soddalashtiradi.",
    "advantages": [
      "Oson formatlash: Sanalarni o'qish va yozishda ko'plab formatlash imkoniyatlari.",
      "Zonalar: Vaqt zonalari bilan ishlash uchun kengaytirilgan imkoniyatlar.",
      "Oson vaqt hisoblash: Sana va vaqt bilan bog'liq hisob-kitoblarni oson bajarish."
    ],
    "usage": "- Sana va vaqt bilan ishlash, formatlash va hisoblash uchun ishlatiladi.",
    "example": "const moment = require('moment');\n\nlet now = moment();\nconsole.log(now.format('MMMM Do YYYY, h:mm:ss a'));\nconsole.log(now.add(7, 'days').calendar());"
  },
  {
    "id": "16",
    "title": "Next.js SSR",
    "outDecription": "React ilovalari uchun server-side rendering va statik saytlarni yaratish frameworki.",
    "description": "Next.js — bu React asosida ishlab chiqilgan, server-side rendering (SSR) va statik saytlarni (SSG) yaratish uchun ishlatiladigan framework. Bu tez rivojlanish va SEO-ga do'st ilovalar yaratishda juda foydalidir.",
    "advantages": [
      "Server-side rendering: Foydalanuvchi sahifani so'rovi bilan serverda render qilish.",
      "Statik saytlar: Saytni statik HTML fayllari sifatida oldindan yaratish imkoniyati.",
      "Routing: Saytlar orasida oson navigatsiya qilish uchun avvaldan konfiguratsiya qilinadigan routing."
    ],
    "usage": "- Server-side rendering (SSR) va statik saytlar (SSG) yaratish uchun ishlatiladi.",
    "example": "import React from 'react';\n\nfunction Home() {\n  return <h1>Welcome to Next.js!</h1>;\n}\n\nexport async function getStaticProps() {\n  return {\n    props: {},\n  };\n}\n\nexport default Home;"
  },
  {
    "id": "17",
    "title": "Lodash",
    "outDecription": "JavaScript uchun kengaytirilgan yordamchi funksiyalar kutubxonasi.",
    "description": "Lodash — bu JavaScript dasturlash tilida kengaytirilgan yordamchi funksiyalarni taqdim etadigan kutubxona. Bu kutubxona array, object, string, math va boshqa ko'plab umumiy vazifalarni soddalashtiradi.",
    "advantages": [
      "Ko'plab yordamchi funksiyalar: Array, object, string va boshqa ko'plab operatsiyalarni soddalashtiradi.",
      "Kengaytirilgan metodlar: JavaScript-da mavjud bo'lmagan ko'plab yordamchi metodlarni taqdim etadi.",
      "Chidamlilik: Oson ishlash va samarali ishlash uchun optimallashtirilgan."
    ],
    "usage": "- JavaScriptdagi umumiy vazifalarni tez va oson bajarish uchun ishlatiladi.",
    "example": "const _ = require('lodash');\n\nlet numbers = [1, 2, 3, 4, 5];\nconsole.log(_.reverse(numbers));\nconsole.log(_.shuffle(numbers));"
  },
  {
    "id": "18",
    "title": "Axios",
    "outDecription": "HTTP so'rovlarini yuborish uchun promise asosida ishlaydigan kutubxona.",
    "description": "Axios — bu JavaScript kutubxonasi bo'lib, u HTTP so'rovlarini yuborish va ularni qayta ishlash uchun ishlatiladi. Promise asosida ishlaydi va asinxron kodni soddalashtiradi.",
    "advantages": [
      "Promise asosida ishlaydi: Asinxron kodni yaxshilaydi.",
      "HTTP metodlari: GET, POST, PUT, DELETE va boshqalar uchun kengaytirilgan metodlar.",
      "Oson konfiguratsiya: Parametrlar, sarlavhalar va boshqa sozlamalarni oson sozlash imkoniyati."
    ],
    "usage": "- HTTP so'rovlarini yuborish va ularni boshqarish uchun ishlatiladi.",
    "example": "import axios from 'axios';\n\naxios.get('https://api.example.com/data')\n  .then(response => {\n    console.log(response.data);\n  })\n  .catch(error => {\n    console.error('Error:', error);\n  });"
  },
  {
    "id": "19",
    "title": "D3.js",
    "outDecription": "Ma'lumotlarni vizualizatsiya qilish uchun JavaScript kutubxonasi.",
    "description": "D3.js — bu ma'lumotlarni vizualizatsiya qilish uchun mo'ljallangan JavaScript kutubxonasi. U ma'lumotlarni interaktiv va dinamik vizual shaklga keltirish imkoniyatini beradi.",
    "advantages": [
      "Interaktivlik: Ma'lumotlarga asoslangan animatsiyalar va interaktivlikni qo'llab-quvvatlaydi.",
      "Fleksibilite: Ma'lumotlar vizualizatsiyasi uchun moslashtirilgan grafikalar yaratish imkoniyati.",
      "Chidamlilik: Kengaytirilgan kutubxona va imkoniyatlar."
    ],
    "usage": "- Ma'lumotlar vizualizatsiyasi, diagrammalar va grafikalar yaratish uchun ishlatiladi.",
    "example": "const d3 = require('d3');\n\nconst data = [1, 2, 3, 4, 5];\n\nconst width = 500;\nconst height = 500;\nconst svg = d3.select('body').append('svg').attr('width', width).attr('height', height);\n\nsvg.selectAll('circle')\n  .data(data)\n  .enter().append('circle')\n  .attr('cx', (d, i) => i * 50 + 25)\n  .attr('cy', height / 2)\n  .attr('r', d => d * 5);"
  },
  {
    "id": "20",
    "title": "GraphQL",
    "outDecription": "Ma'lumotlarga so'rovlar yuborish uchun API texnologiyasi.",
    "description": "GraphQL — bu ma'lumotlarga so'rovlar yuborish va ular bilan ishlash uchun API texnologiyasi. Bu REST API-larining rivojlangan va yanada samarali alternativa sifatida ishlatiladi.",
    "advantages": [
      "So'rovga moslashuvchanlik: Foydalanuvchi faqat kerakli ma'lumotlarni so'rashi mumkin.",
      "Effektiv: Keraksiz ma'lumotlar yuborilmaydi va olingan ma'lumotlar optimallashtirilgan.",
      "Mustaqillik: Mijozning so'rovlariga asoslangan har bir javobni o'z ichiga oladi."
    ],
    "usage": "- Ma'lumotlarni olish va ularni optimallashtirish uchun ishlatiladi.",
    "example": "import { gql } from 'apollo-boost';\n\nconst GET_DATA = gql`\n  query {\n    getData {\n      id\n      name\n    }\n  }\n`;\n\nclient.query({ query: GET_DATA }).then(response => {\n  console.log(response.data);\n});"
  },
  {
    "id": "21",
    "title": "Vue.js",
    "outDecription": "JavaScript frameworki, oson o'rganish va rivojlanish uchun ishlatiladi.",
    "description": "Vue.js — bu React va Angular kabi kutubxonalar bilan raqobatlashadigan, lekin juda oson o'rganiladigan JavaScript frameworki. Bu interaktiv foydalanuvchi interfeyslarini yaratishda foydalaniladi.",
    "advantages": [
      "Oson o'rganish: Vue.js ni o'rganish uchun kam vaqt talab etiladi.",
      "Reaktiv tizim: Ma'lumotlar o'zgarishi bilan UI avtomatik yangilanadi.",
      "Moslashuvchan: Kichik va yirik ilovalar uchun moslashadi."
    ],
    "usage": "- Interaktiv foydalanuvchi interfeyslarini yaratish uchun ishlatiladi.",
    "example": "import { createApp } from 'vue';\n\nconst app = createApp({\n  data() {\n    return { message: 'Hello, Vue!' };\n  }\n});\napp.mount('#app');"
  },
  {
    "id": "22",
    "title": "React",
    "outDecription": "UI yaratish uchun eng mashhur JavaScript kutubxonasi.",
    "description": "React — bu UI yaratish uchun ishlatiladigan JavaScript kutubxonasi. U komponentlar asosida ishlaydi va DOM bilan samarali ishlashni ta'minlaydi.",
    "advantages": [
      "Komponentlar asosida tuzilish: UI ni kichik, qayta ishlatiladigan qismlarga bo'lish.",
      "Virtual DOM: DOM manipulyatsiyasini samarali qilish uchun ishlatiladi.",
      "Keng qo'llab-quvvatlash: Yuzlab kutubxonalar va plaginlarga ega."
    ],
    "usage": "- Komponentlar asosida interaktiv va samarali UI yaratish uchun ishlatiladi.",
    "example": "import React from 'react';\nimport ReactDOM from 'react-dom';\n\nconst App = () => <h1>Hello, React!</h1>;\n\nReactDOM.render(<App />, document.getElementById('root'));"
  },
  {
    "id": "23",
    "title": "Tailwind CSS",
    "outDecription": "CSS frameworki, oson va tezkor dizayn yaratishga yordam beradi.",
    "description": "Tailwind CSS — bu utility-first CSS framework bo'lib, dasturchilarga oson va tezkor tarzda foydalanuvchi interfeyslarini yaratishga yordam beradi.",
    "advantages": [
      "Tez ishlash: Faqat kerakli classlarni qo'shib, tezda dizayn qilish mumkin.",
      "Moslashuvchan: Turli xil dizaynlar uchun mukammal moslashadi.",
      "Minimalistik: CSS kodini qisqartiradi va soddalashtiradi."
    ],
    "usage": "- Tez va oson dizayn yaratish uchun ishlatiladi.",
    "example": "<div class='bg-blue-500 text-white p-4 rounded'>Hello, Tailwind CSS!</div>"
  },
  {
    "id": "24",
    "title": "Sass",
    "outDecription": "CSS preprocessing uchun kutubxona.",
    "description": "Sass — bu CSS preprocessori bo'lib, uni yozishni soddalashtiradi va kengaytirilgan imkoniyatlarni taqdim etadi. Bu o'zgaruvchilar, arifmetik hisoblashlar va boshqa bir nechta foydali xususiyatlarni qo'llab-quvvatlaydi.",
    "advantages": [
      "O'zgaruvchilar: Ranglar va boshqa CSS parametrlarini oson boshqarish imkoniyatini beradi.",
      "Nested struktura: CSS yozishni osonlashtiradi, murakkab strukturalarni yaratishga imkon beradi.",
      "Mixin va funksiyalar: Qayta ishlatish imkoniyatlarini yaratadi."
    ],
    "usage": "- Kengaytirilgan CSS yozish uchun ishlatiladi.",
    "example": "$primary-color: #3498db;\n\nbody {\n  background-color: $primary-color;\n}"
  },
  {
    "id": "25",
    "title": "Socket.io",
    "outDecription": "Real-time ilovalar uchun WebSockets kutubxonasi.",
    "description": "Socket.io — bu real-time ilovalar yaratish uchun WebSockets texnologiyasidan foydalanadigan kutubxona. Bu ikki tomonlama real-time aloqa o'rnatishni soddalashtiradi.",
    "advantages": [
      "Real-time aloqa: Ma'lumotlarni ikki tomonlama uzatish imkonini beradi.",
      "Yaxshi qo'llab-quvvatlash: Har xil tarmoq sharoitlariga moslashadi.",
      "Ishonchlilik: Kechikishlarni kamaytiradi va ishonchli aloqani ta'minlaydi."
    ],
    "usage": "- Chat ilovalari, real-time yangilanishlar va boshqa real-time xizmatlar yaratish uchun ishlatiladi.",
    "example": "const socket = io();\nsocket.emit('message', 'Hello, Server!');\nsocket.on('message', data => {\n  console.log(data);\n});"
  }
]
